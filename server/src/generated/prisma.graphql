# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Envelope implements Node {
  id: ID!
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image!]
  owner(where: UserWhereInput): User
  ownerName: String
  recipientName: String
}

type Image implements Node {
  id: ID!
  link: String!
  fileName: String!
  envelope(where: EnvelopeWhereInput): Envelope!
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
  author(where: UserWhereInput): User!
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  envelopes(where: EnvelopeWhereInput, orderBy: EnvelopeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Envelope!]
}


#
# Other Types
#

type AggregateEnvelope {
  count: Int!
}

type AggregateImage {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type EnvelopeConnection {
  pageInfo: PageInfo!
  edges: [EnvelopeEdge]!
  aggregate: AggregateEnvelope!
}

input EnvelopeCreateInput {
  ownerName: String
  recipientName: String
  images: ImageCreateManyWithoutEnvelopeInput
  owner: UserCreateOneWithoutEnvelopesInput
}

input EnvelopeCreateManyWithoutOwnerInput {
  create: [EnvelopeCreateWithoutOwnerInput!]
  connect: [EnvelopeWhereUniqueInput!]
}

input EnvelopeCreateOneWithoutImagesInput {
  create: EnvelopeCreateWithoutImagesInput
  connect: EnvelopeWhereUniqueInput
}

input EnvelopeCreateWithoutImagesInput {
  ownerName: String
  recipientName: String
  owner: UserCreateOneWithoutEnvelopesInput
}

input EnvelopeCreateWithoutOwnerInput {
  ownerName: String
  recipientName: String
  images: ImageCreateManyWithoutEnvelopeInput
}

type EnvelopeEdge {
  node: Envelope!
  cursor: String!
}

enum EnvelopeOrderByInput {
  id_ASC
  id_DESC
  ownerName_ASC
  ownerName_DESC
  recipientName_ASC
  recipientName_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EnvelopePreviousValues {
  id: ID!
  ownerName: String
  recipientName: String
}

type EnvelopeSubscriptionPayload {
  mutation: MutationType!
  node: Envelope
  updatedFields: [String!]
  previousValues: EnvelopePreviousValues
}

input EnvelopeSubscriptionWhereInput {
  AND: [EnvelopeSubscriptionWhereInput!]
  OR: [EnvelopeSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EnvelopeWhereInput
}

input EnvelopeUpdateInput {
  ownerName: String
  recipientName: String
  images: ImageUpdateManyWithoutEnvelopeInput
  owner: UserUpdateOneWithoutEnvelopesInput
}

input EnvelopeUpdateManyWithoutOwnerInput {
  create: [EnvelopeCreateWithoutOwnerInput!]
  connect: [EnvelopeWhereUniqueInput!]
  disconnect: [EnvelopeWhereUniqueInput!]
  delete: [EnvelopeWhereUniqueInput!]
  update: [EnvelopeUpdateWithoutOwnerInput!]
  upsert: [EnvelopeUpsertWithoutOwnerInput!]
}

input EnvelopeUpdateOneWithoutImagesInput {
  create: EnvelopeCreateWithoutImagesInput
  connect: EnvelopeWhereUniqueInput
  disconnect: EnvelopeWhereUniqueInput
  delete: EnvelopeWhereUniqueInput
  update: EnvelopeUpdateWithoutImagesInput
  upsert: EnvelopeUpsertWithoutImagesInput
}

input EnvelopeUpdateWithoutImagesDataInput {
  ownerName: String
  recipientName: String
  owner: UserUpdateOneWithoutEnvelopesInput
}

input EnvelopeUpdateWithoutImagesInput {
  where: EnvelopeWhereUniqueInput!
  data: EnvelopeUpdateWithoutImagesDataInput!
}

input EnvelopeUpdateWithoutOwnerDataInput {
  ownerName: String
  recipientName: String
  images: ImageUpdateManyWithoutEnvelopeInput
}

input EnvelopeUpdateWithoutOwnerInput {
  where: EnvelopeWhereUniqueInput!
  data: EnvelopeUpdateWithoutOwnerDataInput!
}

input EnvelopeUpsertWithoutImagesInput {
  where: EnvelopeWhereUniqueInput!
  update: EnvelopeUpdateWithoutImagesDataInput!
  create: EnvelopeCreateWithoutImagesInput!
}

input EnvelopeUpsertWithoutOwnerInput {
  where: EnvelopeWhereUniqueInput!
  update: EnvelopeUpdateWithoutOwnerDataInput!
  create: EnvelopeCreateWithoutOwnerInput!
}

input EnvelopeWhereInput {
  AND: [EnvelopeWhereInput!]
  OR: [EnvelopeWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  ownerName: String
  ownerName_not: String
  ownerName_in: [String!]
  ownerName_not_in: [String!]
  ownerName_lt: String
  ownerName_lte: String
  ownerName_gt: String
  ownerName_gte: String
  ownerName_contains: String
  ownerName_not_contains: String
  ownerName_starts_with: String
  ownerName_not_starts_with: String
  ownerName_ends_with: String
  ownerName_not_ends_with: String
  recipientName: String
  recipientName_not: String
  recipientName_in: [String!]
  recipientName_not_in: [String!]
  recipientName_lt: String
  recipientName_lte: String
  recipientName_gt: String
  recipientName_gte: String
  recipientName_contains: String
  recipientName_not_contains: String
  recipientName_starts_with: String
  recipientName_not_starts_with: String
  recipientName_ends_with: String
  recipientName_not_ends_with: String
  images_every: ImageWhereInput
  images_some: ImageWhereInput
  images_none: ImageWhereInput
  owner: UserWhereInput
}

input EnvelopeWhereUniqueInput {
  id: ID
}

type ImageConnection {
  pageInfo: PageInfo!
  edges: [ImageEdge]!
  aggregate: AggregateImage!
}

input ImageCreateInput {
  link: String!
  fileName: String!
  envelope: EnvelopeCreateOneWithoutImagesInput!
}

input ImageCreateManyWithoutEnvelopeInput {
  create: [ImageCreateWithoutEnvelopeInput!]
  connect: [ImageWhereUniqueInput!]
}

input ImageCreateWithoutEnvelopeInput {
  link: String!
  fileName: String!
}

type ImageEdge {
  node: Image!
  cursor: String!
}

enum ImageOrderByInput {
  id_ASC
  id_DESC
  link_ASC
  link_DESC
  fileName_ASC
  fileName_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ImagePreviousValues {
  id: ID!
  link: String!
  fileName: String!
}

type ImageSubscriptionPayload {
  mutation: MutationType!
  node: Image
  updatedFields: [String!]
  previousValues: ImagePreviousValues
}

input ImageSubscriptionWhereInput {
  AND: [ImageSubscriptionWhereInput!]
  OR: [ImageSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ImageWhereInput
}

input ImageUpdateInput {
  link: String
  fileName: String
  envelope: EnvelopeUpdateOneWithoutImagesInput
}

input ImageUpdateManyWithoutEnvelopeInput {
  create: [ImageCreateWithoutEnvelopeInput!]
  connect: [ImageWhereUniqueInput!]
  disconnect: [ImageWhereUniqueInput!]
  delete: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithoutEnvelopeInput!]
  upsert: [ImageUpsertWithoutEnvelopeInput!]
}

input ImageUpdateWithoutEnvelopeDataInput {
  link: String
  fileName: String
}

input ImageUpdateWithoutEnvelopeInput {
  where: ImageWhereUniqueInput!
  data: ImageUpdateWithoutEnvelopeDataInput!
}

input ImageUpsertWithoutEnvelopeInput {
  where: ImageWhereUniqueInput!
  update: ImageUpdateWithoutEnvelopeDataInput!
  create: ImageCreateWithoutEnvelopeInput!
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  fileName: String
  fileName_not: String
  fileName_in: [String!]
  fileName_not_in: [String!]
  fileName_lt: String
  fileName_lte: String
  fileName_gt: String
  fileName_gte: String
  fileName_contains: String
  fileName_not_contains: String
  fileName_starts_with: String
  fileName_not_starts_with: String
  fileName_ends_with: String
  fileName_not_ends_with: String
  envelope: EnvelopeWhereInput
}

input ImageWhereUniqueInput {
  id: ID
  link: String
}

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createUser(data: UserCreateInput!): User!
  createEnvelope(data: EnvelopeCreateInput!): Envelope!
  createImage(data: ImageCreateInput!): Image!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateEnvelope(data: EnvelopeUpdateInput!, where: EnvelopeWhereUniqueInput!): Envelope
  updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  deletePost(where: PostWhereUniqueInput!): Post
  deleteUser(where: UserWhereUniqueInput!): User
  deleteEnvelope(where: EnvelopeWhereUniqueInput!): Envelope
  deleteImage(where: ImageWhereUniqueInput!): Image
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertEnvelope(where: EnvelopeWhereUniqueInput!, create: EnvelopeCreateInput!, update: EnvelopeUpdateInput!): Envelope!
  upsertImage(where: ImageWhereUniqueInput!, create: ImageCreateInput!, update: ImageUpdateInput!): Image!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyEnvelopes(data: EnvelopeUpdateInput!, where: EnvelopeWhereInput!): BatchPayload!
  updateManyImages(data: ImageUpdateInput!, where: ImageWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyEnvelopes(where: EnvelopeWhereInput!): BatchPayload!
  deleteManyImages(where: ImageWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
  author: UserCreateOneInput!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
  author: UserUpdateOneInput
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  author: UserWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  envelopes(where: EnvelopeWhereInput, orderBy: EnvelopeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Envelope]!
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image]!
  post(where: PostWhereUniqueInput!): Post
  user(where: UserWhereUniqueInput!): User
  envelope(where: EnvelopeWhereUniqueInput!): Envelope
  image(where: ImageWhereUniqueInput!): Image
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  envelopesConnection(where: EnvelopeWhereInput, orderBy: EnvelopeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EnvelopeConnection!
  imagesConnection(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImageConnection!
  node(id: ID!): Node
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  envelope(where: EnvelopeSubscriptionWhereInput): EnvelopeSubscriptionPayload
  image(where: ImageSubscriptionWhereInput): ImageSubscriptionPayload
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  envelopes: EnvelopeCreateManyWithoutOwnerInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEnvelopesInput {
  create: UserCreateWithoutEnvelopesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEnvelopesInput {
  email: String!
  password: String!
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  email: String
  password: String
  name: String
  envelopes: EnvelopeUpdateManyWithoutOwnerInput
}

input UserUpdateInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateInput
  upsert: UserUpsertInput
}

input UserUpdateOneWithoutEnvelopesInput {
  create: UserCreateWithoutEnvelopesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutEnvelopesInput
  upsert: UserUpsertWithoutEnvelopesInput
}

input UserUpdateWithoutEnvelopesDataInput {
  email: String
  password: String
  name: String
}

input UserUpdateWithoutEnvelopesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutEnvelopesDataInput!
}

input UserUpsertInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutEnvelopesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutEnvelopesDataInput!
  create: UserCreateWithoutEnvelopesInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  envelopes_every: EnvelopeWhereInput
  envelopes_some: EnvelopeWhereInput
  envelopes_none: EnvelopeWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
